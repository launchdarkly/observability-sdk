// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gql

import (
	"context"
	"encoding/json"

	"github.com/Khan/genqlient/graphql"
)

// GetSamplingConfigResponse is returned by GetSamplingConfig on success.
type GetSamplingConfigResponse struct {
	Sampling GetSamplingConfigSamplingSamplingConfig `json:"sampling"`
}

// GetSampling returns GetSamplingConfigResponse.Sampling, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigResponse) GetSampling() GetSamplingConfigSamplingSamplingConfig {
	return v.Sampling
}

// GetSamplingConfigSamplingSamplingConfig includes the requested fields of the GraphQL type SamplingConfig.
type GetSamplingConfigSamplingSamplingConfig struct {
	Spans []GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfig `json:"spans"`
	Logs  []GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfig   `json:"logs"`
}

// GetSpans returns GetSamplingConfigSamplingSamplingConfig.Spans, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfig) GetSpans() []GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfig {
	return v.Spans
}

// GetLogs returns GetSamplingConfigSamplingSamplingConfig.Logs, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfig) GetLogs() []GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfig {
	return v.Logs
}

// GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfig includes the requested fields of the GraphQL type LogSamplingConfig.
// The GraphQL type's documentation follows.
//
// A match based log sampling configuration. A log matches if each specified matching configuration matches.
// If no matching configuration is specified, then all spans will match.
// The sampling ratio will be applied to all matching spans.
type GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfig struct {
	// Matches against the log message.
	Message GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigMessageMatchConfig `json:"message"`
	// Matches against the severity of the log.
	SeverityText GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigSeverityTextMatchConfig `json:"severityText"`
	// A list of attribute match configs.
	// In order to match each attribute listed must match. This is an implicit AND operation.
	Attributes []GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfig `json:"attributes"`
	// The ratio of logs to sample. Expressed in the form 1/n. So if the ratio is 10, then 1 out of
	// every 10 logs will be sampled. Setting the ratio to 0 will disable sampling for the log.
	SamplingRatio int `json:"samplingRatio"`
}

// GetMessage returns GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfig.Message, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfig) GetMessage() GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigMessageMatchConfig {
	return v.Message
}

// GetSeverityText returns GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfig.SeverityText, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfig) GetSeverityText() GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigSeverityTextMatchConfig {
	return v.SeverityText
}

// GetAttributes returns GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfig.Attributes, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfig) GetAttributes() []GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfig {
	return v.Attributes
}

// GetSamplingRatio returns GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfig.SamplingRatio, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfig) GetSamplingRatio() int {
	return v.SamplingRatio
}

// GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfig includes the requested fields of the GraphQL type AttributeMatchConfig.
// The GraphQL type's documentation follows.
//
// An attribute match configuration which can match an attribute key and value.
type GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfig struct {
	Key       GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig       `json:"key"`
	Attribute GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig `json:"attribute"`
}

// GetKey returns GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfig.Key, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfig) GetKey() GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig {
	return v.Key
}

// GetAttribute returns GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfig.Attribute, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfig) GetAttribute() GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig {
	return v.Attribute
}

// GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig includes the requested fields of the GraphQL type MatchConfig.
// The GraphQL type's documentation follows.
//
// A match configuration. Each field of this type represents a different type of match
// configuration. One and only 1 field should be populated.
//
// This is effectively a sum type/discriminated union, but isn't implemented as such to avoid
// this bug: https://github.com/99designs/gqlgen/issues/2741
type GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig struct {
	MatchParts `json:"-"`
}

// GetRegexValue returns GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig.RegexValue, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig) GetRegexValue() string {
	return v.MatchParts.RegexValue
}

// GetMatchValue returns GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig.MatchValue, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig) GetMatchValue() interface{} {
	return v.MatchParts.MatchValue
}

func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig
		graphql.NoUnmarshalJSON
	}
	firstPass.GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MatchParts)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig struct {
	RegexValue string `json:"regexValue"`

	MatchValue interface{} `json:"matchValue"`
}

func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig) __premarshalJSON() (*__premarshalGetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig, error) {
	var retval __premarshalGetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig

	retval.RegexValue = v.MatchParts.RegexValue
	retval.MatchValue = v.MatchParts.MatchValue
	return &retval, nil
}

// GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig includes the requested fields of the GraphQL type MatchConfig.
// The GraphQL type's documentation follows.
//
// A match configuration. Each field of this type represents a different type of match
// configuration. One and only 1 field should be populated.
//
// This is effectively a sum type/discriminated union, but isn't implemented as such to avoid
// this bug: https://github.com/99designs/gqlgen/issues/2741
type GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig struct {
	MatchParts `json:"-"`
}

// GetRegexValue returns GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig.RegexValue, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig) GetRegexValue() string {
	return v.MatchParts.RegexValue
}

// GetMatchValue returns GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig.MatchValue, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig) GetMatchValue() interface{} {
	return v.MatchParts.MatchValue
}

func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig
		graphql.NoUnmarshalJSON
	}
	firstPass.GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MatchParts)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig struct {
	RegexValue string `json:"regexValue"`

	MatchValue interface{} `json:"matchValue"`
}

func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig) __premarshalJSON() (*__premarshalGetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig, error) {
	var retval __premarshalGetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig

	retval.RegexValue = v.MatchParts.RegexValue
	retval.MatchValue = v.MatchParts.MatchValue
	return &retval, nil
}

// GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigMessageMatchConfig includes the requested fields of the GraphQL type MatchConfig.
// The GraphQL type's documentation follows.
//
// A match configuration. Each field of this type represents a different type of match
// configuration. One and only 1 field should be populated.
//
// This is effectively a sum type/discriminated union, but isn't implemented as such to avoid
// this bug: https://github.com/99designs/gqlgen/issues/2741
type GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigMessageMatchConfig struct {
	MatchParts `json:"-"`
}

// GetRegexValue returns GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigMessageMatchConfig.RegexValue, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigMessageMatchConfig) GetRegexValue() string {
	return v.MatchParts.RegexValue
}

// GetMatchValue returns GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigMessageMatchConfig.MatchValue, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigMessageMatchConfig) GetMatchValue() interface{} {
	return v.MatchParts.MatchValue
}

func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigMessageMatchConfig) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigMessageMatchConfig
		graphql.NoUnmarshalJSON
	}
	firstPass.GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigMessageMatchConfig = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MatchParts)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigMessageMatchConfig struct {
	RegexValue string `json:"regexValue"`

	MatchValue interface{} `json:"matchValue"`
}

func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigMessageMatchConfig) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigMessageMatchConfig) __premarshalJSON() (*__premarshalGetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigMessageMatchConfig, error) {
	var retval __premarshalGetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigMessageMatchConfig

	retval.RegexValue = v.MatchParts.RegexValue
	retval.MatchValue = v.MatchParts.MatchValue
	return &retval, nil
}

// GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigSeverityTextMatchConfig includes the requested fields of the GraphQL type MatchConfig.
// The GraphQL type's documentation follows.
//
// A match configuration. Each field of this type represents a different type of match
// configuration. One and only 1 field should be populated.
//
// This is effectively a sum type/discriminated union, but isn't implemented as such to avoid
// this bug: https://github.com/99designs/gqlgen/issues/2741
type GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigSeverityTextMatchConfig struct {
	MatchParts `json:"-"`
}

// GetRegexValue returns GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigSeverityTextMatchConfig.RegexValue, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigSeverityTextMatchConfig) GetRegexValue() string {
	return v.MatchParts.RegexValue
}

// GetMatchValue returns GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigSeverityTextMatchConfig.MatchValue, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigSeverityTextMatchConfig) GetMatchValue() interface{} {
	return v.MatchParts.MatchValue
}

func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigSeverityTextMatchConfig) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigSeverityTextMatchConfig
		graphql.NoUnmarshalJSON
	}
	firstPass.GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigSeverityTextMatchConfig = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MatchParts)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigSeverityTextMatchConfig struct {
	RegexValue string `json:"regexValue"`

	MatchValue interface{} `json:"matchValue"`
}

func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigSeverityTextMatchConfig) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigSeverityTextMatchConfig) __premarshalJSON() (*__premarshalGetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigSeverityTextMatchConfig, error) {
	var retval __premarshalGetSamplingConfigSamplingSamplingConfigLogsLogSamplingConfigSeverityTextMatchConfig

	retval.RegexValue = v.MatchParts.RegexValue
	retval.MatchValue = v.MatchParts.MatchValue
	return &retval, nil
}

// GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfig includes the requested fields of the GraphQL type SpanSamplingConfig.
// The GraphQL type's documentation follows.
//
// A match based span sampling configuration. A span matches if each specified matching configuration
// matches.
// If no matching configuration is specified, then all spans will match.
// The sampling ratio will be applied to all matching spans.
type GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfig struct {
	Name GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigNameMatchConfig `json:"name"`
	// A list of attribute match configs.
	// In order to match each attribute listed must match. This is an implicit AND operation.
	Attributes []GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfig `json:"attributes"`
	// A list of span event match configs.
	Events []GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfig `json:"events"`
	// The ratio of spans to sample. Expressed in the form 1/n. So if the ratio is 10, then 1 out of
	// every 10 spans will be sampled. Setting the ratio to 0 will disable sampling for the span.
	SamplingRatio int `json:"samplingRatio"`
}

// GetName returns GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfig.Name, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfig) GetName() GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigNameMatchConfig {
	return v.Name
}

// GetAttributes returns GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfig.Attributes, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfig) GetAttributes() []GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfig {
	return v.Attributes
}

// GetEvents returns GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfig.Events, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfig) GetEvents() []GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfig {
	return v.Events
}

// GetSamplingRatio returns GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfig.SamplingRatio, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfig) GetSamplingRatio() int {
	return v.SamplingRatio
}

// GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfig includes the requested fields of the GraphQL type AttributeMatchConfig.
// The GraphQL type's documentation follows.
//
// An attribute match configuration which can match an attribute key and value.
type GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfig struct {
	Key       GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig       `json:"key"`
	Attribute GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig `json:"attribute"`
}

// GetKey returns GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfig.Key, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfig) GetKey() GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig {
	return v.Key
}

// GetAttribute returns GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfig.Attribute, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfig) GetAttribute() GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig {
	return v.Attribute
}

// GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig includes the requested fields of the GraphQL type MatchConfig.
// The GraphQL type's documentation follows.
//
// A match configuration. Each field of this type represents a different type of match
// configuration. One and only 1 field should be populated.
//
// This is effectively a sum type/discriminated union, but isn't implemented as such to avoid
// this bug: https://github.com/99designs/gqlgen/issues/2741
type GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig struct {
	MatchParts `json:"-"`
}

// GetRegexValue returns GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig.RegexValue, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig) GetRegexValue() string {
	return v.MatchParts.RegexValue
}

// GetMatchValue returns GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig.MatchValue, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig) GetMatchValue() interface{} {
	return v.MatchParts.MatchValue
}

func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig
		graphql.NoUnmarshalJSON
	}
	firstPass.GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MatchParts)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig struct {
	RegexValue string `json:"regexValue"`

	MatchValue interface{} `json:"matchValue"`
}

func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig) __premarshalJSON() (*__premarshalGetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig, error) {
	var retval __premarshalGetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigAttributeMatchConfig

	retval.RegexValue = v.MatchParts.RegexValue
	retval.MatchValue = v.MatchParts.MatchValue
	return &retval, nil
}

// GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig includes the requested fields of the GraphQL type MatchConfig.
// The GraphQL type's documentation follows.
//
// A match configuration. Each field of this type represents a different type of match
// configuration. One and only 1 field should be populated.
//
// This is effectively a sum type/discriminated union, but isn't implemented as such to avoid
// this bug: https://github.com/99designs/gqlgen/issues/2741
type GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig struct {
	MatchParts `json:"-"`
}

// GetRegexValue returns GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig.RegexValue, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig) GetRegexValue() string {
	return v.MatchParts.RegexValue
}

// GetMatchValue returns GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig.MatchValue, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig) GetMatchValue() interface{} {
	return v.MatchParts.MatchValue
}

func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig
		graphql.NoUnmarshalJSON
	}
	firstPass.GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MatchParts)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig struct {
	RegexValue string `json:"regexValue"`

	MatchValue interface{} `json:"matchValue"`
}

func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig) __premarshalJSON() (*__premarshalGetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig, error) {
	var retval __premarshalGetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigAttributesAttributeMatchConfigKeyMatchConfig

	retval.RegexValue = v.MatchParts.RegexValue
	retval.MatchValue = v.MatchParts.MatchValue
	return &retval, nil
}

// GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfig includes the requested fields of the GraphQL type SpanEventMatchConfig.
// The GraphQL type's documentation follows.
//
// An event matcher configuration which matches span events within a span.
type GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfig struct {
	Name       GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigNameMatchConfig                  `json:"name"`
	Attributes []GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfig `json:"attributes"`
}

// GetName returns GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfig.Name, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfig) GetName() GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigNameMatchConfig {
	return v.Name
}

// GetAttributes returns GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfig.Attributes, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfig) GetAttributes() []GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfig {
	return v.Attributes
}

// GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfig includes the requested fields of the GraphQL type AttributeMatchConfig.
// The GraphQL type's documentation follows.
//
// An attribute match configuration which can match an attribute key and value.
type GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfig struct {
	Key       GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigKeyMatchConfig       `json:"key"`
	Attribute GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigAttributeMatchConfig `json:"attribute"`
}

// GetKey returns GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfig.Key, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfig) GetKey() GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigKeyMatchConfig {
	return v.Key
}

// GetAttribute returns GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfig.Attribute, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfig) GetAttribute() GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigAttributeMatchConfig {
	return v.Attribute
}

// GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigAttributeMatchConfig includes the requested fields of the GraphQL type MatchConfig.
// The GraphQL type's documentation follows.
//
// A match configuration. Each field of this type represents a different type of match
// configuration. One and only 1 field should be populated.
//
// This is effectively a sum type/discriminated union, but isn't implemented as such to avoid
// this bug: https://github.com/99designs/gqlgen/issues/2741
type GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigAttributeMatchConfig struct {
	MatchParts `json:"-"`
}

// GetRegexValue returns GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigAttributeMatchConfig.RegexValue, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigAttributeMatchConfig) GetRegexValue() string {
	return v.MatchParts.RegexValue
}

// GetMatchValue returns GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigAttributeMatchConfig.MatchValue, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigAttributeMatchConfig) GetMatchValue() interface{} {
	return v.MatchParts.MatchValue
}

func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigAttributeMatchConfig) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigAttributeMatchConfig
		graphql.NoUnmarshalJSON
	}
	firstPass.GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigAttributeMatchConfig = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MatchParts)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigAttributeMatchConfig struct {
	RegexValue string `json:"regexValue"`

	MatchValue interface{} `json:"matchValue"`
}

func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigAttributeMatchConfig) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigAttributeMatchConfig) __premarshalJSON() (*__premarshalGetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigAttributeMatchConfig, error) {
	var retval __premarshalGetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigAttributeMatchConfig

	retval.RegexValue = v.MatchParts.RegexValue
	retval.MatchValue = v.MatchParts.MatchValue
	return &retval, nil
}

// GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigKeyMatchConfig includes the requested fields of the GraphQL type MatchConfig.
// The GraphQL type's documentation follows.
//
// A match configuration. Each field of this type represents a different type of match
// configuration. One and only 1 field should be populated.
//
// This is effectively a sum type/discriminated union, but isn't implemented as such to avoid
// this bug: https://github.com/99designs/gqlgen/issues/2741
type GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigKeyMatchConfig struct {
	MatchParts `json:"-"`
}

// GetRegexValue returns GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigKeyMatchConfig.RegexValue, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigKeyMatchConfig) GetRegexValue() string {
	return v.MatchParts.RegexValue
}

// GetMatchValue returns GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigKeyMatchConfig.MatchValue, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigKeyMatchConfig) GetMatchValue() interface{} {
	return v.MatchParts.MatchValue
}

func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigKeyMatchConfig) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigKeyMatchConfig
		graphql.NoUnmarshalJSON
	}
	firstPass.GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigKeyMatchConfig = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MatchParts)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigKeyMatchConfig struct {
	RegexValue string `json:"regexValue"`

	MatchValue interface{} `json:"matchValue"`
}

func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigKeyMatchConfig) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigKeyMatchConfig) __premarshalJSON() (*__premarshalGetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigKeyMatchConfig, error) {
	var retval __premarshalGetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigAttributesAttributeMatchConfigKeyMatchConfig

	retval.RegexValue = v.MatchParts.RegexValue
	retval.MatchValue = v.MatchParts.MatchValue
	return &retval, nil
}

// GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigNameMatchConfig includes the requested fields of the GraphQL type MatchConfig.
// The GraphQL type's documentation follows.
//
// A match configuration. Each field of this type represents a different type of match
// configuration. One and only 1 field should be populated.
//
// This is effectively a sum type/discriminated union, but isn't implemented as such to avoid
// this bug: https://github.com/99designs/gqlgen/issues/2741
type GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigNameMatchConfig struct {
	MatchParts `json:"-"`
}

// GetRegexValue returns GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigNameMatchConfig.RegexValue, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigNameMatchConfig) GetRegexValue() string {
	return v.MatchParts.RegexValue
}

// GetMatchValue returns GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigNameMatchConfig.MatchValue, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigNameMatchConfig) GetMatchValue() interface{} {
	return v.MatchParts.MatchValue
}

func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigNameMatchConfig) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigNameMatchConfig
		graphql.NoUnmarshalJSON
	}
	firstPass.GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigNameMatchConfig = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MatchParts)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigNameMatchConfig struct {
	RegexValue string `json:"regexValue"`

	MatchValue interface{} `json:"matchValue"`
}

func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigNameMatchConfig) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigNameMatchConfig) __premarshalJSON() (*__premarshalGetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigNameMatchConfig, error) {
	var retval __premarshalGetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigEventsSpanEventMatchConfigNameMatchConfig

	retval.RegexValue = v.MatchParts.RegexValue
	retval.MatchValue = v.MatchParts.MatchValue
	return &retval, nil
}

// GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigNameMatchConfig includes the requested fields of the GraphQL type MatchConfig.
// The GraphQL type's documentation follows.
//
// A match configuration. Each field of this type represents a different type of match
// configuration. One and only 1 field should be populated.
//
// This is effectively a sum type/discriminated union, but isn't implemented as such to avoid
// this bug: https://github.com/99designs/gqlgen/issues/2741
type GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigNameMatchConfig struct {
	MatchParts `json:"-"`
}

// GetRegexValue returns GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigNameMatchConfig.RegexValue, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigNameMatchConfig) GetRegexValue() string {
	return v.MatchParts.RegexValue
}

// GetMatchValue returns GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigNameMatchConfig.MatchValue, and is useful for accessing the field via an interface.
func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigNameMatchConfig) GetMatchValue() interface{} {
	return v.MatchParts.MatchValue
}

func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigNameMatchConfig) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigNameMatchConfig
		graphql.NoUnmarshalJSON
	}
	firstPass.GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigNameMatchConfig = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MatchParts)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigNameMatchConfig struct {
	RegexValue string `json:"regexValue"`

	MatchValue interface{} `json:"matchValue"`
}

func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigNameMatchConfig) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigNameMatchConfig) __premarshalJSON() (*__premarshalGetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigNameMatchConfig, error) {
	var retval __premarshalGetSamplingConfigSamplingSamplingConfigSpansSpanSamplingConfigNameMatchConfig

	retval.RegexValue = v.MatchParts.RegexValue
	retval.MatchValue = v.MatchParts.MatchValue
	return &retval, nil
}

// MatchParts includes the GraphQL fields of MatchConfig requested by the fragment MatchParts.
// The GraphQL type's documentation follows.
//
// A match configuration. Each field of this type represents a different type of match
// configuration. One and only 1 field should be populated.
//
// This is effectively a sum type/discriminated union, but isn't implemented as such to avoid
// this bug: https://github.com/99designs/gqlgen/issues/2741
type MatchParts struct {
	// A match configuration which matches against a regular expression.
	// Can only match string attributes.
	RegexValue string `json:"regexValue"`
	// A match configuration which does an exact match against any value.
	MatchValue interface{} `json:"matchValue"`
}

// GetRegexValue returns MatchParts.RegexValue, and is useful for accessing the field via an interface.
func (v *MatchParts) GetRegexValue() string { return v.RegexValue }

// GetMatchValue returns MatchParts.MatchValue, and is useful for accessing the field via an interface.
func (v *MatchParts) GetMatchValue() interface{} { return v.MatchValue }

// __GetSamplingConfigInput is used internally by genqlient
type __GetSamplingConfigInput struct {
	Organization_verbose_id string `json:"organization_verbose_id"`
}

// GetOrganization_verbose_id returns __GetSamplingConfigInput.Organization_verbose_id, and is useful for accessing the field via an interface.
func (v *__GetSamplingConfigInput) GetOrganization_verbose_id() string {
	return v.Organization_verbose_id
}

// The query executed by GetSamplingConfig.
const GetSamplingConfig_Operation = `
query GetSamplingConfig ($organization_verbose_id: String!) {
	sampling(organization_verbose_id: $organization_verbose_id) {
		spans {
			name {
				... MatchParts
			}
			attributes {
				key {
					... MatchParts
				}
				attribute {
					... MatchParts
				}
			}
			events {
				name {
					... MatchParts
				}
				attributes {
					key {
						... MatchParts
					}
					attribute {
						... MatchParts
					}
				}
			}
			samplingRatio
		}
		logs {
			message {
				... MatchParts
			}
			severityText {
				... MatchParts
			}
			attributes {
				key {
					... MatchParts
				}
				attribute {
					... MatchParts
				}
			}
			samplingRatio
		}
	}
}
fragment MatchParts on MatchConfig {
	regexValue
	matchValue
}
`

func GetSamplingConfig(
	ctx_ context.Context,
	client_ graphql.Client,
	organization_verbose_id string,
) (data_ *GetSamplingConfigResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetSamplingConfig",
		Query:  GetSamplingConfig_Operation,
		Variables: &__GetSamplingConfigInput{
			Organization_verbose_id: organization_verbose_id,
		},
	}

	data_ = &GetSamplingConfigResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

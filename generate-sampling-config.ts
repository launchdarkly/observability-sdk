#!/usr/bin/env node

/**
 * Standalone script to generate GraphQL body for GetSamplingConfigDocument
 * and its TypeScript types for use with fetch API.
 *
 * This script generates:
 * 1. The GraphQL query body as a string
 * 2. TypeScript types for the query variables and response
 * 3. A function to create the fetch request body
 *
 * Run with: npx tsx generate-sampling-config.ts
 */

// TypeScript types for the GraphQL query
export interface GetSamplingConfigQueryVariables {
	organization_verbose_id: string
}

export interface MatchConfig {
	regexValue?: string | null
	matchValue?: any | null
}

export interface AttributeMatchConfig {
	key: MatchConfig
	attribute: MatchConfig
}

export interface SpanEventMatchConfig {
	name?: MatchConfig | null
	attributes?: AttributeMatchConfig[] | null
}

export interface SpanSamplingConfig {
	samplingRatio: number
	name?: MatchConfig | null
	attributes?: AttributeMatchConfig[] | null
	events?: SpanEventMatchConfig[] | null
}

export interface LogSamplingConfig {
	samplingRatio: number
	message?: MatchConfig | null
	severityText?: MatchConfig | null
	attributes?: AttributeMatchConfig[] | null
}

export interface SamplingConfig {
	spans?: SpanSamplingConfig[] | null
	logs?: LogSamplingConfig[] | null
}

export interface GetSamplingConfigQuery {
	sampling: SamplingConfig
}

// GraphQL query as a string
const GET_SAMPLING_CONFIG_QUERY = `
query GetSamplingConfig($organization_verbose_id: String!) {
  sampling(organization_verbose_id: $organization_verbose_id) {
    spans {
      name {
        regexValue
        matchValue
      }
      attributes {
        key {
          regexValue
          matchValue
        }
        attribute {
          regexValue
          matchValue
        }
      }
      events {
        name {
          regexValue
          matchValue
        }
        attributes {
          key {
            regexValue
            matchValue
          }
          attribute {
            regexValue
            matchValue
          }
        }
      }
      samplingRatio
    }
    logs {
      message {
        regexValue
        matchValue
      }
      severityText {
        regexValue
        matchValue
      }
      attributes {
        key {
          regexValue
          matchValue
        }
        attribute {
          regexValue
          matchValue
        }
      }
      samplingRatio
    }
  }
}`

/**
 * Creates the request body for the GetSamplingConfig GraphQL query
 * @param variables - The query variables
 * @returns The request body object ready for JSON.stringify()
 */
export function createGetSamplingConfigBody(
	variables: GetSamplingConfigQueryVariables,
) {
	return {
		query: GET_SAMPLING_CONFIG_QUERY,
		variables,
	}
}

/**
 * Executes the GetSamplingConfig query using fetch
 * @param url - The GraphQL endpoint URL
 * @param variables - The query variables
 * @param options - Additional fetch options
 * @returns Promise with the query response
 */
export async function executeGetSamplingConfig(
	url: string,
	variables: GetSamplingConfigQueryVariables,
	options: RequestInit = {},
): Promise<GetSamplingConfigQuery> {
	const body = createGetSamplingConfigBody(variables)

	const response = await fetch(url, {
		method: 'POST',
		headers: {
			'Content-Type': 'application/json',
			...options.headers,
		},
		body: JSON.stringify(body),
		...options,
	})

	if (!response.ok) {
		throw new Error(
			`GraphQL request failed: ${response.status} ${response.statusText}`,
		)
	}

	const result = await response.json()

	if (result.errors) {
		throw new Error(`GraphQL errors: ${JSON.stringify(result.errors)}`)
	}

	return result.data
}

// Generate the output files
function generateOutput() {
	const output = `// Auto-generated by generate-sampling-config.ts
// Generated on: ${new Date().toISOString()}

${GET_SAMPLING_CONFIG_QUERY.split('\n')
	.map((line) => `// ${line}`)
	.join('\n')}

export interface GetSamplingConfigQueryVariables {
  organization_verbose_id: string;
}

export interface MatchConfig {
  regexValue?: string | null;
  matchValue?: any | null;
}

export interface AttributeMatchConfig {
  key: MatchConfig;
  attribute: MatchConfig;
}

export interface SpanEventMatchConfig {
  name?: MatchConfig | null;
  attributes?: AttributeMatchConfig[] | null;
}

export interface SpanSamplingConfig {
  samplingRatio: number;
  name?: MatchConfig | null;
  attributes?: AttributeMatchConfig[] | null;
  events?: SpanEventMatchConfig[] | null;
}

export interface LogSamplingConfig {
  samplingRatio: number;
  message?: MatchConfig | null;
  severityText?: MatchConfig | null;
  attributes?: AttributeMatchConfig[] | null;
}

export interface SamplingConfig {
  spans?: SpanSamplingConfig[] | null;
  logs?: LogSamplingConfig[] | null;
}

export interface GetSamplingConfigQuery {
  sampling: SamplingConfig;
}

export const GET_SAMPLING_CONFIG_QUERY = \`${GET_SAMPLING_CONFIG_QUERY}\`;

export function createGetSamplingConfigBody(variables: GetSamplingConfigQueryVariables) {
  return {
    query: GET_SAMPLING_CONFIG_QUERY,
    variables
  };
}

export async function executeGetSamplingConfig(
  url: string,
  variables: GetSamplingConfigQueryVariables,
  options: RequestInit = {}
): Promise<GetSamplingConfigQuery> {
  const body = createGetSamplingConfigBody(variables);
  
  const response = await fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
    body: JSON.stringify(body),
    ...options,
  });

  if (!response.ok) {
    throw new Error(\`GraphQL request failed: \${response.status} \${response.statusText}\`);
  }

  const result = await response.json();
  
  if (result.errors) {
    throw new Error(\`GraphQL errors: \${JSON.stringify(result.errors)}\`);
  }

  return result.data;
}
`

	return output
}

// Main execution
if (require.main === module) {
	const fs = require('fs')
	const path = require('path')

	const output = generateOutput()
	const outputPath = path.join(process.cwd(), 'sampling-config-generated.ts')

	fs.writeFileSync(outputPath, output)
	console.log(`Generated sampling config types and query at: ${outputPath}`)
	console.log('\nUsage example:')
	console.log(`
import { executeGetSamplingConfig } from './sampling-config-generated';

const result = await executeGetSamplingConfig(
  'https://your-graphql-endpoint.com/graphql',
  { organization_verbose_id: 'your-org-id' }
);
console.log(result.sampling);
  `)
}

export default {
	GET_SAMPLING_CONFIG_QUERY,
	createGetSamplingConfigBody,
	executeGetSamplingConfig,
	types: {
		GetSamplingConfigQueryVariables,
		GetSamplingConfigQuery,
		SamplingConfig,
		SpanSamplingConfig,
		LogSamplingConfig,
		MatchConfig,
		AttributeMatchConfig,
		SpanEventMatchConfig,
	},
}

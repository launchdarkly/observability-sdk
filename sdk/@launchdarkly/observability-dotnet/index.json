{
  "CHANGELOG.html": {
    "href": "CHANGELOG.html",
    "title": "Changelog | LaunchDarkly Observability plugin for the Server-Side SDK for .NET",
    "summary": "Changelog 0.1.0 (2025-08-26) Features Add basic config for dotnet plugin. (#167) (3203e82) Add custom sampler for dotnet. (#175) (de74b20) Add export/processor samplers. (#178) (2431886) Add graphql query to get sampling config. (#181) (ee51f80) Add initial plugin for dotnet. (#173) (564536d) Add singleton for dotnet. (#185) (c32cf1c) Allow custom configuration of otel. (#187) (54e7214)"
  },
  "README.html": {
    "href": "README.html",
    "title": "LaunchDarkly Observability Plugin for .Net | LaunchDarkly Observability plugin for the Server-Side SDK for .NET",
    "summary": "LaunchDarkly Observability Plugin for .Net Early Access Preview️ NB: APIs are subject to change until a 1.x version is released. Install dotnet add package LaunchDarkly.Observability Install the plugin when configuring your LaunchDarkly SDK. // TODO: Add example. LaunchDarkly overview LaunchDarkly is a feature management platform that serves trillions of feature flags daily to help teams build better software, faster. Get started using LaunchDarkly today! Contributing We encourage pull requests and other contributions from the community. Check out our contributing guidelines for instructions on how to contribute to this SDK. About LaunchDarkly LaunchDarkly is a continuous delivery platform that provides feature flags as a service and allows developers to iterate quickly and safely. We allow you to easily flag your features and manage them from the LaunchDarkly dashboard. With LaunchDarkly, you can: Roll out a new feature to a subset of your users (like a group of users who opt-in to a beta tester group), gathering feedback and bug reports from real-world use cases. Gradually roll out a feature to an increasing percentage of users, and track the effect that the feature has on key metrics (for instance, how likely is a user to complete a purchase if they have feature A versus feature B?). Turn off a feature that you realize is causing performance problems in production, without needing to re-deploy, or even restart the application with a changed configuration file. Grant access to certain features based on user attributes, like payment plan (eg: users on the ‘gold’ plan get access to more features than users in the ‘silver’ plan). Disable parts of your application to facilitate maintenance, without taking everything offline. LaunchDarkly provides feature flag SDKs for a wide variety of languages and technologies. Check out our documentation for a complete list. Explore LaunchDarkly launchdarkly.com for more information docs.launchdarkly.com for our documentation and SDK reference guides apidocs.launchdarkly.com for our API documentation launchdarkly.com/blog for the latest product updates"
  },
  "api/LaunchDarkly.Observability.BaseBuilder-1.html": {
    "href": "api/LaunchDarkly.Observability.BaseBuilder-1.html",
    "title": "Class BaseBuilder<TBuilder> | LaunchDarkly Observability plugin for the Server-Side SDK for .NET",
    "summary": "Class BaseBuilder<TBuilder> Base builder which allows for methods to be shared between building a config directly and building a plugin. This uses the CRTP pattern to allow the individual builder methods to return instances of the derived builder type. Inheritance object BaseBuilder<TBuilder> ObservabilityConfig.ObservabilityConfigBuilder ObservabilityPlugin.ObservabilityPluginBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Observability Assembly: LaunchDarkly.Observability.dll Syntax public class BaseBuilder<TBuilder> where TBuilder : BaseBuilder<TBuilder> Type Parameters Name Description TBuilder Constructors | Edit this page View Source BaseBuilder() Declaration protected BaseBuilder() Methods | Edit this page View Source WithBackendUrl(string) Set the back-end URL for non-telemetry operations. For most configurations, the backend url will not need to be set. Setting the url to null will reset the builder value to the default. Declaration public TBuilder WithBackendUrl(string backendUrl) Parameters Type Name Description string backendUrl The back-end URL used for non-telemetry operations. Returns Type Description TBuilder A reference to this builder. | Edit this page View Source WithEnvironment(string) Set the environment name. Declaration public TBuilder WithEnvironment(string environment) Parameters Type Name Description string environment The environment name (for example, \"prod\" or \"staging\"). Returns Type Description TBuilder A reference to this builder. | Edit this page View Source WithExtendedLoggerConfiguration(Action<LoggerProviderBuilder>) Method which extends the configuration of the logger provider. The basic logger options will already be configured by the LaunchDarkly Observability plugin. This method should be used to extend that configuration with additional instrumentation. Configuring exporters or processors may interfere with the operation of the plugin and is not recommended. Declaration public TBuilder WithExtendedLoggerConfiguration(Action<LoggerProviderBuilder> extendedLoggerConfiguration) Parameters Type Name Description Action<LoggerProviderBuilder> extendedLoggerConfiguration A function used to extend the logging configuration. Returns Type Description TBuilder A reference to this builder. Examples Adding custom instrumentation: ObservabilityConfig.Builder() .WithExtendedLoggerConfiguration(builder => { builder.AddMyInstrumentation(); }); | Edit this page View Source WithExtendedMeterConfiguration(Action<MeterProviderBuilder>) Method which extends the configuration of the meter provider. The basic meter options will already be configured by the LaunchDarkly Observability plugin. This method should be used to extend that configuration with additional meters, views, or custom instrumentation. By default, metrics will be configured with the following instrumentation: Runtime Instrumentation (GC, thread pool, JIT statistics) Process Instrumentation (CPU, memory, handle counts) HTTP Client Instrumentation (request counts, durations) AspNetCore Instrumentation (request rates, response times) SQL Client Instrumentation (query execution times, connection pool metrics) Configuring exporters or processors may interfere with the operation of the plugin and is not recommended. Declaration public TBuilder WithExtendedMeterConfiguration(Action<MeterProviderBuilder> extendedMeterConfiguration) Parameters Type Name Description Action<MeterProviderBuilder> extendedMeterConfiguration A function used to extend the metrics configuration. Returns Type Description TBuilder A reference to this builder. Examples Adding custom instrumentation: ObservabilityConfig.Builder() .WithExtendedMeterConfiguration(builder => { // Add meters from your custom instrumentation builder.AddMyInstrumentation(); }); | Edit this page View Source WithExtendedTracingConfig(Action<TracerProviderBuilder>) Method which extends the configuration of the tracer provider. The basic tracer options will already be configured by the LaunchDarkly Observability plugin. This method should be used to extend that configuration with additional instrumentation or additional activity sources. By default tracing will be configured with the following instrumentation: HTTP Client Instrumentation GRPC Client Instrumentation WCF Instrumentation Quart Instrumentation AspNetCore Instrumentation SQL Client Instrumentation Configuring exporters or processors may interfere with the operation of the plugin and is not recommended. Declaration public TBuilder WithExtendedTracingConfig(Action<TracerProviderBuilder> extendedTracerConfiguration) Parameters Type Name Description Action<TracerProviderBuilder> extendedTracerConfiguration A function used to extend the tracing configuration. Returns Type Description TBuilder A reference to this builder. Examples Add additional activity sources: ObservabilityConfig.Builder() .WithExtendedTracingConfig(builder => { // Activities started by this activity source will be in exported spans. builder.AddSource(\"my-custom-activity-source\"); }); Add additional instrumentation. ObservabilityConfig.Builder() .WithExtendedTracingConfig(builder => { builder.AddMyInstrumentation() }); | Edit this page View Source WithOtlpEndpoint(string) Set the OTLP endpoint. For most configurations, the OTLP endpoint will not need to be set. Setting the endpoint to null will reset the builder value to the default. Declaration public TBuilder WithOtlpEndpoint(string otlpEndpoint) Parameters Type Name Description string otlpEndpoint The OTLP exporter endpoint URL. Returns Type Description TBuilder A reference to this builder. | Edit this page View Source WithServiceName(string) Set the service name. Declaration public TBuilder WithServiceName(string serviceName) Parameters Type Name Description string serviceName The logical service name used in telemetry resource attributes. Returns Type Description TBuilder A reference to this builder. | Edit this page View Source WithServiceVersion(string) Set the service version. Declaration public TBuilder WithServiceVersion(string serviceVersion) Parameters Type Name Description string serviceVersion The version of the service that will be added to resource attributes when a service name is provided. Returns Type Description TBuilder A reference to this builder."
  },
  "api/LaunchDarkly.Observability.ObservabilityConfig.ObservabilityConfigBuilder.html": {
    "href": "api/LaunchDarkly.Observability.ObservabilityConfig.ObservabilityConfigBuilder.html",
    "title": "Class ObservabilityConfig.ObservabilityConfigBuilder | LaunchDarkly Observability plugin for the Server-Side SDK for .NET",
    "summary": "Class ObservabilityConfig.ObservabilityConfigBuilder Builder for building an observability configuration. Inheritance object BaseBuilder<ObservabilityConfig.ObservabilityConfigBuilder> ObservabilityConfig.ObservabilityConfigBuilder Inherited Members BaseBuilder<ObservabilityConfig.ObservabilityConfigBuilder>.WithOtlpEndpoint(string) BaseBuilder<ObservabilityConfig.ObservabilityConfigBuilder>.WithBackendUrl(string) BaseBuilder<ObservabilityConfig.ObservabilityConfigBuilder>.WithServiceName(string) BaseBuilder<ObservabilityConfig.ObservabilityConfigBuilder>.WithServiceVersion(string) BaseBuilder<ObservabilityConfig.ObservabilityConfigBuilder>.WithEnvironment(string) BaseBuilder<ObservabilityConfig.ObservabilityConfigBuilder>.WithExtendedTracingConfig(Action<TracerProviderBuilder>) BaseBuilder<ObservabilityConfig.ObservabilityConfigBuilder>.WithExtendedLoggerConfiguration(Action<LoggerProviderBuilder>) BaseBuilder<ObservabilityConfig.ObservabilityConfigBuilder>.WithExtendedMeterConfiguration(Action<MeterProviderBuilder>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Observability Assembly: LaunchDarkly.Observability.dll Syntax public class ObservabilityConfig.ObservabilityConfigBuilder : BaseBuilder<ObservabilityConfig.ObservabilityConfigBuilder>"
  },
  "api/LaunchDarkly.Observability.ObservabilityConfig.html": {
    "href": "api/LaunchDarkly.Observability.ObservabilityConfig.html",
    "title": "Struct ObservabilityConfig | LaunchDarkly Observability plugin for the Server-Side SDK for .NET",
    "summary": "Struct ObservabilityConfig Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Observability Assembly: LaunchDarkly.Observability.dll Syntax public struct ObservabilityConfig Properties | Edit this page View Source BackendUrl The configured back-end URL. This is used for non-telemetry operations such as accessing the sampling configuration. Declaration public string BackendUrl { get; } Property Value Type Description string | Edit this page View Source Environment The environment for the service. Declaration public string Environment { get; } Property Value Type Description string | Edit this page View Source ExtendedLoggerConfiguration Function which extends the configuration of the logger provider. Declaration public Action<LoggerProviderBuilder> ExtendedLoggerConfiguration { get; } Property Value Type Description Action<LoggerProviderBuilder> | Edit this page View Source ExtendedMeterConfiguration Function which extends the configuration of the meter provider. Declaration public Action<MeterProviderBuilder> ExtendedMeterConfiguration { get; } Property Value Type Description Action<MeterProviderBuilder> | Edit this page View Source ExtendedTracerConfiguration Function which extends the configuration of the tracer provider. Declaration public Action<TracerProviderBuilder> ExtendedTracerConfiguration { get; } Property Value Type Description Action<TracerProviderBuilder> | Edit this page View Source OtlpEndpoint The configured OTLP endpoint. Declaration public string OtlpEndpoint { get; } Property Value Type Description string | Edit this page View Source SdkKey The LaunchDarkly SDK key. Declaration public string SdkKey { get; } Property Value Type Description string | Edit this page View Source ServiceName The name of the service. The service name is used for adding resource attributes. If a service name is not defined, then the service version will also not be included in the resource attributes. Declaration public string ServiceName { get; } Property Value Type Description string | Edit this page View Source ServiceVersion The version of the service. Declaration public string ServiceVersion { get; } Property Value Type Description string"
  },
  "api/LaunchDarkly.Observability.ObservabilityExtensions.html": {
    "href": "api/LaunchDarkly.Observability.ObservabilityExtensions.html",
    "title": "Class ObservabilityExtensions | LaunchDarkly Observability plugin for the Server-Side SDK for .NET",
    "summary": "Class ObservabilityExtensions Static class containing extension methods for configuring observability Inheritance object ObservabilityExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Observability Assembly: LaunchDarkly.Observability.dll Syntax public static class ObservabilityExtensions Methods | Edit this page View Source AddLaunchDarklyObservability(IServiceCollection, string, Action<ObservabilityConfigBuilder>) Add the LaunchDarkly Observability services. This function would typically be called by the LaunchDarkly Observability plugin. This should only be called by the end user if the Observability plugin needs to be initialized earlier than the LaunchDarkly client. Declaration public static IServiceCollection AddLaunchDarklyObservability(this IServiceCollection services, string sdkKey, Action<ObservabilityConfig.ObservabilityConfigBuilder> configure) Parameters Type Name Description IServiceCollection services The service collection string sdkKey The LaunchDarkly SDK Action<ObservabilityConfig.ObservabilityConfigBuilder> configure A method to configure the services Returns Type Description IServiceCollection The service collection"
  },
  "api/LaunchDarkly.Observability.ObservabilityPlugin.ObservabilityPluginBuilder.html": {
    "href": "api/LaunchDarkly.Observability.ObservabilityPlugin.ObservabilityPluginBuilder.html",
    "title": "Class ObservabilityPlugin.ObservabilityPluginBuilder | LaunchDarkly Observability plugin for the Server-Side SDK for .NET",
    "summary": "Class ObservabilityPlugin.ObservabilityPluginBuilder Used to build an instance of the Observability Plugin. Inheritance object BaseBuilder<ObservabilityPlugin.ObservabilityPluginBuilder> ObservabilityPlugin.ObservabilityPluginBuilder Inherited Members BaseBuilder<ObservabilityPlugin.ObservabilityPluginBuilder>.WithOtlpEndpoint(string) BaseBuilder<ObservabilityPlugin.ObservabilityPluginBuilder>.WithBackendUrl(string) BaseBuilder<ObservabilityPlugin.ObservabilityPluginBuilder>.WithServiceName(string) BaseBuilder<ObservabilityPlugin.ObservabilityPluginBuilder>.WithServiceVersion(string) BaseBuilder<ObservabilityPlugin.ObservabilityPluginBuilder>.WithEnvironment(string) BaseBuilder<ObservabilityPlugin.ObservabilityPluginBuilder>.WithExtendedTracingConfig(Action<TracerProviderBuilder>) BaseBuilder<ObservabilityPlugin.ObservabilityPluginBuilder>.WithExtendedLoggerConfiguration(Action<LoggerProviderBuilder>) BaseBuilder<ObservabilityPlugin.ObservabilityPluginBuilder>.WithExtendedMeterConfiguration(Action<MeterProviderBuilder>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Observability Assembly: LaunchDarkly.Observability.dll Syntax public sealed class ObservabilityPlugin.ObservabilityPluginBuilder : BaseBuilder<ObservabilityPlugin.ObservabilityPluginBuilder> Methods | Edit this page View Source Build() Build an ObservabilityPlugin instance with the configured settings. Declaration public ObservabilityPlugin Build() Returns Type Description ObservabilityPlugin The constructed ObservabilityPlugin."
  },
  "api/LaunchDarkly.Observability.ObservabilityPlugin.html": {
    "href": "api/LaunchDarkly.Observability.ObservabilityPlugin.html",
    "title": "Class ObservabilityPlugin | LaunchDarkly Observability plugin for the Server-Side SDK for .NET",
    "summary": "Class ObservabilityPlugin Inheritance object PluginBase<ILdClient, Hook> Plugin ObservabilityPlugin Inherited Members PluginBase<ILdClient, Hook>.Register(ILdClient, EnvironmentMetadata) PluginBase<ILdClient, Hook>.GetHooks(EnvironmentMetadata) PluginBase<ILdClient, Hook>.Metadata object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Observability Assembly: LaunchDarkly.Observability.dll Syntax public class ObservabilityPlugin : Plugin Methods | Edit this page View Source Builder(IServiceCollection) Create a new builder for ObservabilityPlugin. When using this builder, LaunchDarkly client must be constructed before your application is built. For example: var builder = WebApplication.CreateBuilder(args); var config = Configuration.Builder(Environment.GetEnvironmentVariable(\"your-sdk-key\") .Plugins(new PluginConfigurationBuilder() .Add(ObservabilityPlugin.Builder(builder.Services) .WithServiceName(\"ryan-test-service\") .WithServiceVersion(\"0.0.0\") .Build())).Build(); // Building the LdClient with the Observability plugin. This line will add services to the web application. var client = new LdClient(config); // Client must be built before this line. var app = builder.Build(); Declaration public static ObservabilityPlugin.ObservabilityPluginBuilder Builder(IServiceCollection services) Parameters Type Name Description IServiceCollection services The service collection for dependency injection. Returns Type Description ObservabilityPlugin.ObservabilityPluginBuilder A new ObservabilityPlugin.ObservabilityPluginBuilder instance for configuring the observability plugin. | Edit this page View Source ForExistingServices() Construct a plugin which is intended to be used with already configured observability services. In a typical configuration, this method will not need to be used. This method only needs to be used when observability related functionality must be intialized before it is possible to initialize the LaunchDarkly SDK. Declaration public static ObservabilityPlugin ForExistingServices() Returns Type Description ObservabilityPlugin an observability plugin instance | Edit this page View Source GetHooks(EnvironmentMetadata) Returns a list of hooks to be registered for the plugin, based on the provided environment metadata. Declaration public override IList<Hook> GetHooks(EnvironmentMetadata metadata) Parameters Type Name Description EnvironmentMetadata metadata Metadata about the environment. Returns Type Description IList<Hook> A list of hook instances to be registered. Overrides LaunchDarkly.Sdk.Integrations.Plugins.PluginBase<LaunchDarkly.Sdk.Server.Interfaces.ILdClient, LaunchDarkly.Sdk.Server.Hooks.Hook>.GetHooks(LaunchDarkly.Sdk.Integrations.Plugins.EnvironmentMetadata) | Edit this page View Source Register(ILdClient, EnvironmentMetadata) Registers the plugin with the specified LaunchDarkly client and environment metadata. Declaration public override void Register(ILdClient client, EnvironmentMetadata metadata) Parameters Type Name Description ILdClient client An instance of the LaunchDarkly client to register the plugin with. EnvironmentMetadata metadata Metadata about the environment. Overrides LaunchDarkly.Sdk.Integrations.Plugins.PluginBase<LaunchDarkly.Sdk.Server.Interfaces.ILdClient, LaunchDarkly.Sdk.Server.Hooks.Hook>.Register(LaunchDarkly.Sdk.Server.Interfaces.ILdClient, LaunchDarkly.Sdk.Integrations.Plugins.EnvironmentMetadata)"
  },
  "api/LaunchDarkly.Observability.Observe.html": {
    "href": "api/LaunchDarkly.Observability.Observe.html",
    "title": "Class Observe | LaunchDarkly Observability plugin for the Server-Side SDK for .NET",
    "summary": "Class Observe Inheritance object Observe Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Observability Assembly: LaunchDarkly.Observability.dll Syntax public static class Observe Methods | Edit this page View Source RecordCount(string, long, IDictionary<string, object>) Declaration public static void RecordCount(string name, long value, IDictionary<string, object> attributes = null) Parameters Type Name Description string name long value IDictionary<string, object> attributes | Edit this page View Source RecordException(Exception, IDictionary<string, object>) Record an error in the active activity. If there is not an active activity, then a new activity will be started and the error will be recorded into the activity. Declaration public static void RecordException(Exception exception, IDictionary<string, object> attributes = null) Parameters Type Name Description Exception exception the exception to record IDictionary<string, object> attributes any additional attributes to add to the exception event | Edit this page View Source RecordHistogram(string, double, IDictionary<string, object>) Declaration public static void RecordHistogram(string name, double value, IDictionary<string, object> attributes = null) Parameters Type Name Description string name double value IDictionary<string, object> attributes | Edit this page View Source RecordIncr(string, IDictionary<string, object>) Declaration public static void RecordIncr(string name, IDictionary<string, object> attributes = null) Parameters Type Name Description string name IDictionary<string, object> attributes | Edit this page View Source RecordLog(string, LogLevel, IDictionary<string, object>) Declaration public static void RecordLog(string message, LogLevel level, IDictionary<string, object> attributes) Parameters Type Name Description string message LogLevel level IDictionary<string, object> attributes | Edit this page View Source RecordMetric(string, double, IDictionary<string, object>) Declaration public static void RecordMetric(string name, double value, IDictionary<string, object> attributes = null) Parameters Type Name Description string name double value IDictionary<string, object> attributes | Edit this page View Source RecordUpDownCounter(string, long, IDictionary<string, object>) Declaration public static void RecordUpDownCounter(string name, long delta, IDictionary<string, object> attributes = null) Parameters Type Name Description string name long delta IDictionary<string, object> attributes | Edit this page View Source StartActivity(string, ActivityKind, IDictionary<string, object>) Declaration public static Activity StartActivity(string name, ActivityKind kind = ActivityKind.Internal, IDictionary<string, object> attributes = null) Parameters Type Name Description string name ActivityKind kind IDictionary<string, object> attributes Returns Type Description Activity"
  },
  "api/LaunchDarkly.Observability.Sampling.ThreadSafeSampler.html": {
    "href": "api/LaunchDarkly.Observability.Sampling.ThreadSafeSampler.html",
    "title": "Class ThreadSafeSampler | LaunchDarkly Observability plugin for the Server-Side SDK for .NET",
    "summary": "Class ThreadSafeSampler Class used for event sampling. Inheritance object ThreadSafeSampler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Observability.Sampling Assembly: LaunchDarkly.Observability.dll Syntax public static class ThreadSafeSampler Methods | Edit this page View Source Sample(long) Given a ratio determine if an event should be sampled. Declaration public static bool Sample(long samplingRatio) Parameters Type Name Description long samplingRatio the sampling ratio Returns Type Description bool true if it should be sampled Remarks This function is thread-safe."
  },
  "api/LaunchDarkly.Observability.Sampling.html": {
    "href": "api/LaunchDarkly.Observability.Sampling.html",
    "title": "Namespace LaunchDarkly.Observability.Sampling | LaunchDarkly Observability plugin for the Server-Side SDK for .NET",
    "summary": "Namespace LaunchDarkly.Observability.Sampling Classes ThreadSafeSampler Class used for event sampling."
  },
  "api/LaunchDarkly.Observability.html": {
    "href": "api/LaunchDarkly.Observability.html",
    "title": "Namespace LaunchDarkly.Observability | LaunchDarkly Observability plugin for the Server-Side SDK for .NET",
    "summary": "Namespace LaunchDarkly.Observability Classes BaseBuilder<TBuilder> Base builder which allows for methods to be shared between building a config directly and building a plugin. This uses the CRTP pattern to allow the individual builder methods to return instances of the derived builder type. ObservabilityConfig.ObservabilityConfigBuilder Builder for building an observability configuration. ObservabilityExtensions Static class containing extension methods for configuring observability ObservabilityPlugin ObservabilityPlugin.ObservabilityPluginBuilder Used to build an instance of the Observability Plugin. Observe Structs ObservabilityConfig"
  },
  "index.html": {
    "href": "index.html",
    "title": "LaunchDarkly Observability plugin for the Server-Side SDK for .NET | LaunchDarkly Observability plugin for the Server-Side SDK for .NET",
    "summary": "LaunchDarkly Observability plugin for the Server-Side SDK for .NET For first time users, visit our LaunchDarkly Docs page. Within these docs, the <xref:LaunchDarkly.OpenFeature.ServerProvider.Provider> is a good starting point. The README contains several examples which may be of use. For source code, see the GitHub repository. The developer notes there include links to other repositories used in the SDK. Namespaces LaunchDarkly.Observability: Contains the provider implementation and supporting implementation."
  }
}